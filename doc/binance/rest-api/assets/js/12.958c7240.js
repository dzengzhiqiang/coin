(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{358:function(e,t,i){"use strict";i.r(t);var r=i(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"limits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#limits"}},[e._v("#")]),e._v(" Limits")]),e._v(" "),i("h2",{attrs:{id:"general-info-on-limits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#general-info-on-limits"}},[e._v("#")]),e._v(" General Info on Limits")]),e._v(" "),i("ul",[i("li",[e._v("The following "),i("code",[e._v("intervalLetter")]),e._v(" values for headers:\n"),i("ul",[i("li",[e._v("SECOND => S")]),e._v(" "),i("li",[e._v("MINUTE => M")]),e._v(" "),i("li",[e._v("HOUR => H")]),e._v(" "),i("li",[e._v("DAY => D")])])]),e._v(" "),i("li",[i("code",[e._v("intervalNum")]),e._v(" describes the amount of the interval. For example, "),i("code",[e._v("intervalNum")]),e._v(" 5 with "),i("code",[e._v("intervalLetter")]),e._v(' M means "Every 5 minutes".')]),e._v(" "),i("li",[e._v("The "),i("code",[e._v("/api/v3/exchangeInfo")]),e._v(" "),i("code",[e._v("rateLimits")]),e._v(" array contains objects related to the exchange's "),i("code",[e._v("RAW_REQUEST")]),e._v(", "),i("code",[e._v("REQUEST_WEIGHT")]),e._v(", and "),i("code",[e._v("ORDER")]),e._v(" rate limits. These are further defined in the "),i("code",[e._v("ENUM definitions")]),e._v(" section under "),i("code",[e._v("Rate limiters (rateLimitType)")]),e._v(".")]),e._v(" "),i("li",[e._v("A 429 will be returned when either rate limit is violated.")])]),e._v(" "),i("h2",{attrs:{id:"ip-limits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ip-limits"}},[e._v("#")]),e._v(" IP Limits")]),e._v(" "),i("ul",[i("li",[e._v("Every request will contain "),i("code",[e._v("X-MBX-USED-WEIGHT-(intervalNum)(intervalLetter)")]),e._v(" in the response headers which has the current used weight for the IP for all request rate limiters defined.")]),e._v(" "),i("li",[e._v("Each route has a "),i("code",[e._v("weight")]),e._v(" which determines for the number of requests each endpoint counts for. Heavier endpoints and endpoints that do operations on multiple symbols will have a heavier "),i("code",[e._v("weight")]),e._v(".")]),e._v(" "),i("li",[e._v("When a 429 is received, it's your obligation as an API to back off and not spam the API.")]),e._v(" "),i("li",[i("strong",[e._v("Repeatedly violating rate limits and/or failing to back off after receiving 429s will result in an automated IP ban (HTTP status 418).")])]),e._v(" "),i("li",[e._v("IP bans are tracked and "),i("strong",[e._v("scale in duration")]),e._v(" for repeat offenders, "),i("strong",[e._v("from 2 minutes to 3 days")]),e._v(".")]),e._v(" "),i("li",[e._v("A "),i("code",[e._v("Retry-After")]),e._v(" header is sent with a 418 or 429 responses and will give the "),i("strong",[e._v("number of seconds")]),e._v(" required to wait, in the case of a 429, to prevent a ban, or, in the case of a 418, until the ban is over.")]),e._v(" "),i("li",[i("strong",[e._v("The limits on the API are based on the IPs, not the API keys.")])])]),e._v(" "),i("h2",{attrs:{id:"order-rate-limits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#order-rate-limits"}},[e._v("#")]),e._v(" Order Rate Limits")]),e._v(" "),i("ul",[i("li",[e._v("Every successful order response will contain a "),i("code",[e._v("X-MBX-ORDER-COUNT-(intervalNum)(intervalLetter)")]),e._v(" header which has the current order count for the account for all order rate limiters defined.")]),e._v(" "),i("li",[e._v("Rejected/unsuccessful orders are not guaranteed to have "),i("code",[e._v("X-MBX-ORDER-COUNT-**")]),e._v(" headers in the response.")]),e._v(" "),i("li",[i("strong",[e._v("The order rate limit is counted against each account")]),e._v(".")])])])}),[],!1,null,null,null);t.default=a.exports}}]);